@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IConfiguration Configuration

@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

<h3>Chat Room</h3>

<!-- Create Private Room -->
<button @onclick="CreateRoom">Create Private Room</button>

<!-- Search for Available Rooms -->
<input @bind="searchQuery" placeholder="Search Rooms" />
<button @onclick="SearchRooms">Search</button>

@if (availableRooms == null || availableRooms.Count == 0) {
    <p>No rooms found.</p>
} else {
    <ul>
        @foreach (var room in availableRooms) {
            <li>
                @room
                <button @onclick="() => JoinRoom(room)">Join</button>
            </li>
        }
    </ul>
}

@if (!isConnected) {
    <p>Connecting to the chat...</p>
} else {
    <div id="chat">
        @foreach (var msg in displayMessages) {
            <p><strong>@msg.Username</strong>: @msg.Message</p>
        }
    </div>

    <InputText @bind-Value="message" @oninput="OnInputChanged" @onkeypress="CheckAndSendMessage" />
    <button @onclick="SendMessage" disabled="@string.IsNullOrEmpty(message)">Send</button>
}

@code {
    private List<ChatMessage> messages = new();
    private List<ChatMessage> displayMessages = new();
    private string message = "";
    private string username = "";
    private bool isConnected = false;
    private string aesKey;
    private string searchQuery = "";
    private List<string> availableRooms = new();

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync() {
        // Get JWT token from sessionStorage
        var token = await sessionStorage.GetItemAsync<string>("jwtToken");

        // Redirect to login if token is missing
        if (string.IsNullOrEmpty(token)) {
            NavigationManager.NavigateTo("/login");
            return;
        }

        //Read the aes key from config
        aesKey = Configuration["AESKey"];

        // Decode the JWT token to extract the username
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);

        username = jwtToken.Claims.First(claim => claim.Type == "unique_name").Value;

        // Connect to SignalR hub, passing the JWT token for authentication
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub?room=main"), options => {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .Build();

        // Handle incoming messages from the server
        hubConnection.On<string, string>("ReceiveMessage", (user, encryptedMessage) => {
            var aesHelper = new AesEncryptionHelper(aesKey);
            string decryptedMessage = aesHelper.Decrypt(encryptedMessage);

            messages.Add(new ChatMessage { Username = user, Message = decryptedMessage });
            UpdateDisplayMessages();
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<IEnumerable<string>>("RoomsAvailable", (rooms) => {
            availableRooms = rooms.ToList();
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        isConnected = true;
    }

    private void OnInputChanged(ChangeEventArgs e) {
        message = e.Value?.ToString();
    }

    private string EncryptMessage(string message) {
        var aesHelper = new AesEncryptionHelper(aesKey);
        return aesHelper.Encrypt(message);
    }

    private async Task SendMessage() {
        if (hubConnection is not null && !string.IsNullOrEmpty(message)) {
            string encryptedMessage = EncryptMessage(message);
            await hubConnection.SendAsync("SendMessage", "main", username, encryptedMessage);
            message = "";
        }
    }

    private void CheckAndSendMessage(KeyboardEventArgs e) {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(message)) {
            SendMessage();
        }
        StateHasChanged();
    }

    private void UpdateDisplayMessages() {
        displayMessages = new List<ChatMessage>(messages);  // Create a safe copy for rendering
    }

    // Create a new private room
    private async Task CreateRoom() {
        var roomName = "private/" + username;
        await hubConnection.SendAsync("CreateRoom");
        NavigationManager.NavigateTo($"/{roomName}");
    }

    // Search for rooms
    private async Task SearchRooms() {
        await hubConnection.SendAsync("SearchRooms", username);
        if (availableRooms == null) {
            availableRooms = new List<string>();
        }
    }

    // Join the selected room
    private async Task JoinRoom(string roomName) {
        var canJoin = await hubConnection.InvokeAsync<bool>("CanUserJoinRoom", roomName, username);

        if (canJoin) {
            await hubConnection.StopAsync();
            displayMessages.Clear();
            NavigationManager.NavigateTo($"/private/{roomName}");
        }
    }

    private class ChatMessage
    {
        public string Username { get; set; }
        public string Message { get; set; }
    }
}
