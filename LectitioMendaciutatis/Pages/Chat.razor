@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IConfiguration Configuration

@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims

<h3>Chat Room</h3>

@if (!isConnected) {
    <p>Connecting to the chat...</p>
} else {
    <div id="chat">
        @foreach (var msg in messages) {
            <p><strong>@msg.Username</strong>: @msg.Message</p>
        }
    </div>

    <InputText @bind-Value="message" @oninput="OnInputChanged" @onkeypress="CheckAndSendMessage" />
    <button @onclick="SendMessage" disabled="@string.IsNullOrEmpty(message)">Send</button>
}

@code {
    private List<ChatMessage> messages = new();
    private string message = "";
    private string username = "";
    private bool isConnected = false;
    private string aesKey;

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync() {
        // Get JWT token from sessionStorage
        var token = await sessionStorage.GetItemAsync<string>("jwtToken");

        // Redirect to login if token is missing
        if (string.IsNullOrEmpty(token)) {
            NavigationManager.NavigateTo("/login");
            return;
        }

        //read the aes key from config
        aesKey = Configuration["AESKey"];

        // Decode the JWT token to extract the username
        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);

        //testing
        foreach (var claim in jwtToken.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type}, Value: {claim.Value}");
        }
        //end testing

        username = jwtToken.Claims.First(claim => claim.Type == "unique_name").Value;

        // Connect to SignalR hub, passing the JWT token for authentication
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"), options => {
                options.AccessTokenProvider = () => Task.FromResult(token);
            })
            .Build();

        // Handle incoming messages from the server
        hubConnection.On<string, string>("ReceiveMessage", (user, encryptedMessage) => {
            var aesHelper = new AesEncryptionHelper(aesKey);
            Console.WriteLine($"Received encrypted message client: {encryptedMessage}");
            string decryptedMessage = aesHelper.Decrypt(encryptedMessage);
            Console.WriteLine($"Decrypted message client: {decryptedMessage}");

            messages.Add(new ChatMessage { Username = user, Message = decryptedMessage });
            // Trigger asynchronous UI re-render when new messages are received
            InvokeAsync(StateHasChanged);
            //StateHasChanged();
        });

        // Start the connection
        await hubConnection.StartAsync();
        isConnected = true;
    }

    private void OnInputChanged(ChangeEventArgs e) {
        message = e.Value?.ToString();
        //StateHasChanged();  // Force a UI update after typing
    }

    private string EncryptMessage(string message) {
        var aesHelper = new AesEncryptionHelper(aesKey);
        return aesHelper.Encrypt(message);
    }

    private async Task SendMessage() {
        if (hubConnection is not null && !string.IsNullOrEmpty(message)) {
            Console.WriteLine($"Encrypting message: {message}");
            string encryptedMessage = EncryptMessage(message);
            Console.WriteLine($"Encrypted message: {encryptedMessage}");
            await hubConnection.SendAsync("SendMessage", username, encryptedMessage);
            message = "";
        }
    }

    private void CheckAndSendMessage(KeyboardEventArgs e) {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(message)) {
            SendMessage();
        }

        StateHasChanged();
    }

    private class ChatMessage
    {
        public string Username { get; set; }
        public string Message { get; set; }
    }
}
