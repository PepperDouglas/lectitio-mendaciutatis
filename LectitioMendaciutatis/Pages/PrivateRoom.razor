@using Microsoft.AspNetCore.SignalR.Client
@using System.IdentityModel.Tokens.Jwt
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IConfiguration Configuration
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory

@page "/private/{roomName}"

<div class="container mt-4">
    <h3 class="text-center mb-4">Private Room: @roomName</h3>

    @if (roomName == username) {
        <div class="mb-4">
            <h4>Eligible Users</h4>
            <ul class="list-group">
                @foreach (var user in eligibleUsers) {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @user
                        <button class="btn btn-danger btn-sm" @onclick="() => RemoveUser(user)">Remove</button>
                    </li>
                }
            </ul>
        </div>

        <div class="mb-4">
            <h4>Add Users</h4>
            <div class="input-group" style="max-width: 400px;">
                <input class="form-control" @bind="newUser" placeholder="Enter username" />
                <div class="input-group-append">
                    <button class="btn btn-info" @onclick="AddUser">Add User</button>
                </div>
            </div>
        </div>
    }

    @if (!isConnected) {
        <p class="text-muted">Connecting to the private chat...</p>
    } else {
        <div class="card">
            <div class="card-body" style="height: 400px; overflow-y: auto;" id="chat">
                @foreach (var msg in displayMessages) {
                    <p><strong>@msg.Username</strong>: @msg.Message</p>
                }
            </div>
            <div class="card-footer">
                <div class="input-group">
                    <InputText class="form-control" @bind-Value="message" @oninput="OnInputChanged" @onkeypress="CheckAndSendMessage" placeholder="Type your message..." />
                    <div class="input-group-append">
                        <button class="btn btn-primary" @onclick="SendMessage" disabled="@string.IsNullOrEmpty(message)">Send</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="mt-3 text-right">
        <button class="btn btn-secondary" @onclick="LeaveRoom">Leave Room</button>
    </div>
</div>

@code {
    [Parameter]
    public string roomName { get; set; }
    private List<ChatMessage> displayMessages = new();
    private List<string> eligibleUsers = new();
    private string newUser = "";
    private HubConnection hubConnection;
    private bool isConnected = false;
    private List<ChatMessage> messages = new();
    private string message = "";
    private string username = "";

    private string aesKey;

    protected override async Task OnInitializedAsync() {
        var httpClient = HttpClientFactory.CreateClient("MyApiClient");
        var response = await httpClient.GetAsync($"/api/auth/exists/{roomName}");

        if (response.IsSuccessStatusCode) {
            var data = await response.Content.ReadFromJsonAsync<Dictionary<string, bool>>();
            //Successful res, Key exists, The room doesnt: redirect
            if (data != null && data.ContainsKey("exists") && data["exists"] == false) {
                NavigationManager.NavigateTo("/chat");
                return;
            }
        } else {
            NavigationManager.NavigateTo("/chat");
            return;
        }
        //Get AES key from configuration
        aesKey = Configuration["AESKey"];
    }

    //Initialize hub connection for private room
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            //Get JWT token
            var token = await sessionStorage.GetItemAsync<string>("jwtToken");

            //Redirect to login if token is missing
            if (string.IsNullOrEmpty(token)) {
                NavigationManager.NavigateTo("/login");
                return;
            }

            //Extract the username
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            username = jwtToken.Claims.First(claim => claim.Type == "unique_name").Value;

            //Connection for private room
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?room={roomName}"), options => {
                    options.AccessTokenProvider = () => Task.FromResult(token);
                })
                .Build();

            //Message receiving
            hubConnection.On<string, string>("ReceiveMessage", (user, encryptedMessage) => {
                var aesHelper = new AesEncryptionHelper(aesKey);
                string decryptedMessage = aesHelper.Decrypt(encryptedMessage);
                
                messages.Add(new ChatMessage { Username = user, Message = decryptedMessage });
                UpdateDisplayMessages();
                InvokeAsync(StateHasChanged);
            });

            hubConnection.On<string>("RemovedFromRoom", async (removedUsername) => {
                if (removedUsername == username) {
                    await InvokeAsync(() => {
                        LeaveRoom();
                    });
                }
            });

            try {
                await hubConnection.StartAsync();
                isConnected = true;
                eligibleUsers = await hubConnection.InvokeAsync<List<string>>("GetEligibleUsers", roomName);

                StateHasChanged();
            }
            catch (Exception ex) {
                Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
            }
        }
    }


    //Send a message to the private room
    private async Task SendMessage() {
        if (!string.IsNullOrEmpty(message)) {
            var aesHelper = new AesEncryptionHelper(aesKey);
            string encryptedMessage = aesHelper.Encrypt(message);

            if (hubConnection.State == HubConnectionState.Connected) {
                await hubConnection.SendAsync("SendMessage", roomName, username, encryptedMessage);
                message = "";
            } else {
                Console.WriteLine("Connection is not established yet.");
            }
        }
    }

    //Check if Return/Enter is pressed to send message
    private async Task CheckAndSendMessage(KeyboardEventArgs e) {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(message)) {
            await SendMessage();
        }
    }

    private void OnInputChanged(ChangeEventArgs e) {
        message = e.Value.ToString();
    }

    private void UpdateDisplayMessages() {
        displayMessages = new List<ChatMessage>(messages);  //Create a safe copy for rendering
    }

    //Add a user to the room
    private async Task AddUser() {
        await hubConnection.SendAsync("AddUserToRoom", roomName, newUser);
        newUser = "";
        eligibleUsers = await hubConnection.InvokeAsync<List<string>>("GetEligibleUsers", roomName);
    }

    //Remove a user from the room
    private async Task RemoveUser(string username) {
        await hubConnection.SendAsync("RemoveUserFromRoom", roomName, username);
        eligibleUsers = await hubConnection.InvokeAsync<List<string>>("GetEligibleUsers", roomName);
    }

    //Leave the private room and return to the main chat room
    private void LeaveRoom() {
        hubConnection.StopAsync(); //Stop SignalR connection when leaving the room
        displayMessages.Clear();
        NavigationManager.NavigateTo("/chat"); //Redirect back to main chat room
    }

    private class ChatMessage
    {
        public string Username { get; set; }
        public string Message { get; set; }
    }
}
